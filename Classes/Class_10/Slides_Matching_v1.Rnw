% Font options: 10pm, 11pt, 12pt
% Align headings left instead of center: nocenter
\documentclass[xcolor=x11names,compress]{beamer}
%\documentclass[xcolor=x11names,compress,handout]{beamer}
\usepackage[]{graphicx}
\usepackage[]{color}
\usepackage{booktabs}
\usepackage{hyperref}
\usepackage{tikz}
\usepackage{multirow}
\usepackage{dcolumn}
\usepackage{bigstrut}
\usepackage{amsmath} 
\usepackage{xcolor,colortbl}
\usepackage{amssymb}
%\newcommand{\done}{\cellcolor{teal}#1}

%% Beamer Layout %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\useoutertheme[subsection=false,shadow]{miniframes}
\useinnertheme{default}
\usefonttheme{serif}
\usepackage{Arev}
\usepackage{pdfpages}

\setbeamerfont{title like}{shape=\scshape}
\setbeamerfont{frametitle}{shape=\scshape, size=\normalsize}

\definecolor{dkblue}{RGB}{0,0,102}

\setbeamercolor*{lower separation line head}{bg=dkblue} 
\setbeamercolor*{normal text}{fg=black,bg=white} 
\setbeamercolor*{alerted text}{fg=red} 
\setbeamercolor*{example text}{fg=black} 
\setbeamercolor*{structure}{fg=black} 
 
\setbeamercolor*{palette tertiary}{fg=black,bg=black!10} 
\setbeamercolor*{palette quaternary}{fg=black,bg=black!10} 

\renewcommand{\(}{\begin{columns}}
\renewcommand{\)}{\end{columns}}
\newcommand{\<}[1]{\begin{column}{#1}}
\renewcommand{\>}{\end{column}}

\AtBeginSection{\frame{\sectionpage}}
\usepackage{xcolor}
\hypersetup{
    colorlinks,
    linkcolor={red!50!black},
    citecolor={blue!50!black},
    urlcolor={blue!80!black}
}

\setbeamertemplate{navigation symbols}{} 
\setbeamertemplate{footline}[frame number]
\setbeamertemplate{caption}{\raggedright\insertcaption\par}

\setbeamersize{text margin left=5pt,text margin right=5pt}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\title{FLS 6441 - Methods III: Explanation and Causation}
\subtitle{Week 10 - Matching}
\author{Jonathan Phillips}
\date{May 2020}

\begin{document}

<<Matching, echo=FALSE, warning=FALSE, message=FALSE>>=
library(DiagrammeR)
library(tidyverse)
library(broom)
library(webshot)
library(MatchIt)
library(xtable)
@


\frame{\titlepage}

\begin{frame}
\frametitle{Classification of Research Designs}
\footnotesize
\begin{table}[htbp]
  \centering
  \scalebox{0.7}{
    \begin{tabular}{|p{2.2cm}|p{5cm}|c|c|}
    \hline
          &       & \multicolumn{1}{p{2.4cm}|}{\textbf{Independence of Treatment Assignment}} & \multicolumn{1}{p{3cm}|}{\textbf{Researcher Controls Treatment Assignment?}} \bigstrut\\
    \hline
    \multicolumn{1}{|p{2.9cm}|}{\multirow{2}[4]{2.9cm}{\textbf{Controlled Experiments}}} & Field Experiments & \checkmark      & \checkmark  \bigstrut\\
\cline{2-4}          & Survey and Lab Experiments &  \checkmark     & \checkmark \bigstrut\\
    \hline
          &       &       &  \bigstrut\\
    \hline
    \multicolumn{1}{|p{2.9cm}|}{\multirow{3}[6]{2.9cm}{\textbf{Natural Experiments}}} & Natural Experiments &  \checkmark     &  \bigstrut\\
\cline{2-4}          & Instrumental Variables & \checkmark      &  \bigstrut\\
\cline{2-4}          & Discontinuities & \checkmark      &  \bigstrut\\
    \hline
          &       &       &  \bigstrut\\
    \hline
    \multicolumn{1}{|p{2.9cm}|}{\multirow{4}[8]{2.9cm}{\textbf{Observational Studies}}} & Difference-in-Differences &       &  \bigstrut\\
\cline{2-4}          & Controlling for Confounding &       &  \bigstrut\\
\cline{2-4}          & Matching &       &  \bigstrut\\
\cline{2-4}          & Comparative Cases and Process Tracing &       &  \bigstrut\\
    \hline
    \end{tabular}}%
  \label{tab:addlabel}%
\end{table}%
\normalsize
\end{frame}

\section{Matching} 

\begin{frame}
\frametitle{The Weakness of Controlling}
\begin{itemize}
\item Controlling for confounding with regression has three weak spots:
\pause
\begin{enumerate}
\item \textbf{Lack of overlap} - Extreme treated outliers alter our results, even when there are no comparable control units in the data
\pause
\item \textbf{Model-dependence} - Variable X is a confounder, but is it linear, quadratic, cubic or what? The wrong model of the real relationship with the outcome biases our results
\pause
\item \textbf{Researcher/publication bias} - Lots of freedom to tweak the regression to get positive results
\pause
\end{enumerate}
\item All of these reflect the fact that regression is \textbf{parametric}
\pause
\begin{enumerate}
\item It uses \textit{ALL} of the data
\item It requires us to specify the parameters of a model
\end{enumerate}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{The Weakness of Controlling}
\begin{itemize}
\item The solution? \pause \textbf{Non-parametric} methods for controlling for confounding
\pause
\begin{enumerate}
\item We use \textit{ONLY SOME} of the data
\item We do not specify the parameters of any model
\end{enumerate}
\pause
\item \textbf{Matching} is a non-parametric method
\pause
\begin{itemize}
\item A \textbf{pre-processing} stage 
\item Analysis of the results is separate and comes later
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item If treated and control groups have the \textbf{same values} of \textbf{all} of the confounding variables, we know that treatment is (conditionally) independent of potential outcomes
\pause
\item There is no variation in the confounders that could possibly explain the difference between the outcomes in treated and control groups
\pause
\item So how do we force balance on multiple variables?
\pause
\begin{enumerate}
\item One way is by \textbf{adjusting/extrapolating} each treated observation to predict what it would 'look like' if it were identical to a control observation - a regression model
\pause
\item An alternative is just to \textbf{throw out} all of the treated observations that do not have a comparable control observation - this is matching
\end{enumerate}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Matching should really be called \textbf{trimming} or \textbf{pruning} 
\begin{itemize}
\item Dropping units that don't have good counterfactuals in the data
\end{itemize}
\pause
\item It succeeds only where we can measure and create balance on all confounding variables
\pause
\item Matching is \textbf{NOT} an experimental method
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{enumerate}
\item For each treated unit, find a control unit with very close values of all confounding variables, and keep both
\pause
\item Repeat for every treated unit
\pause
\item Drop all the unmatched units (eg. 'extra' control units that are 'far away' from any treated units)
\pause
\item Assess balance
\pause
\item If balance is low, re-run the matching process as many times as you can to maximize balance!
\end{enumerate}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{enumerate}
\item For example:
\end{enumerate}
<<,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
tibble(x1=c(5,17,4), x2=c(8,2,9), D=c(1,1,0)) %>% ggplot() +
  geom_point(aes(x=x1,y=x2,colour=factor(D)), size=5) + 
  theme_classic() +
  xlim(0,20) +
  ylim(0,10)
@
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{enumerate}
\item For example:
\end{enumerate}
<<,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
tibble(x1=c(5,17,4), x2=c(8,2,9), D=c(1,1,0)) %>% ggplot() +
  geom_point(aes(x=x1,y=x2,colour=factor(D)), size=5) + 
  geom_segment(x=5,xend=4,y=8,yend=9,lty=2) +
  theme_classic() +
  xlim(0,20) +
  ylim(0,10)
  @
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{enumerate}
\item For example:
\end{enumerate}
<<,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
tibble(x1=c(5,17,4), x2=c(8,2,9), D=c(1,1,0)) %>% slice(1,3) %>% ggplot() +
  geom_point(aes(x=x1,y=x2,colour=factor(D)), size=5) + 
  geom_segment(x=5,xend=4,y=8,yend=9,lty=2) +
  theme_classic() +
  xlim(0,20) +
  ylim(0,10)
  @
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Matching \textit{always} produces a smaller dataset
\pause
\begin{itemize}
\item So there is a trade-off between improving balance and retaining a large sample
\end{itemize}
\pause
\item After matching, for the analysis we can either:
\begin{enumerate}
\item Calculate the difference in means between treated and control groups
\pause
\item Conduct the normal regression: $Y \sim D$
\begin{itemize}
\item Option to include all our matching variables as controls
\item This will help control for any \textbf{residual imbalance} (esp. for continuous variables)
\end{itemize}
\end{enumerate}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Which variables to match on?
\pause
\begin{itemize}
\item Treatment variable? \pause \textbf{No!} We need treated and control units who are both male
\pause
\item Outcome variable? \pause \textbf{No!} That's selecting on the dependent variable - biased!
\pause
\item Post-treatment variables? \pause \textbf{No!} This will bias our causal effect, just as in regression
\pause
\item Pre-treatment Confounders? \pause \textbf{Yes!} We want to remove imbalance due to confounders 
\end{itemize}
\end{itemize}
\end{frame}

\setbeamercolor{background canvas}{bg=}
\includepdf[pages={13-18}]{Ho_Slides.pdf}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item To identify 'close' matches we need some measure of distance between units' covariates
\pause
\end{itemize}
\begin{enumerate}
\item Matching on few categorical variables: \textbf{Exact Matching}
\pause
\item Matching on continuous variables (sequentially): \textbf{Nearest-Neighbour Matching}
\pause
\item Matching to maximize balance: \textbf{Optimal/Genetic Matching}
\pause
\item Matching to balance the probability of treatment: \textbf{Propensity Score Matching}
\end{enumerate}
\end{frame}

\section{Alternative Matching Methods}

<<exact_matching,echo=FALSE, warning=FALSE, message=FALSE>>=
set.seed(05410)
N <- 40
treat <- rbinom(N,1,0.5)
num_treated <- length(treat[treat==1])
male <- NA
data <- as.data.frame(cbind(treat,male))
names(data) <- c("Treat","Male")
data <- data %>% mutate(Male=ifelse(Treat==1,rbinom(num_treated,1,1/5),rbinom(num_treated,1,2/5)))
data <- data %>% mutate(Outcome=Treat+Male*2+rnorm(10,2))

#data %>% ggplot() + geom_jitter(aes(x=factor(Treat),y=factor(Male),color=factor(Treat)),width=0.1,height=0.1) + theme_classic()

matched <- matchit(Treat~Male, data=data, method="nearest",exact="Male") #This makes more sense

matches <- data.frame(matched$match.matrix) %>% rownames_to_column()

data_jitter <- data %>% mutate(Treat=Treat+runif(dim(data)[1],-0.1,0.1), Male=Male+runif(dim(data)[1],-0.1,0.1))

matches_T <- data_jitter[matches$rowname,] %>% rownames_to_column()

matches_C <- data_jitter[as.numeric(as.character(matches$X1)),] %>% rownames_to_column()

matches2 <- matches_T %>% bind_cols(matches_C) %>% filter(is.na(Male1)==FALSE)

unmatched_rows <- which(!(1:dim(data)[1] %in% as.numeric(c(matches2$rowname,matches2$rowname1))))

unmatched <- data_jitter %>% slice(unmatched_rows)

#data_jitter %>% ggplot() + geom_point(aes(x=Treat,y=Male,color=Treat)) + theme_classic() + geom_segment(data=matches2,aes(x=Treat,y=Male,xend=Treat1,yend=Male1),lty=2)


@

\begin{frame}
\frametitle{Exact Matching}
\begin{center}
<<exact_matching_1,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data_jitter %>% ggplot() + geom_point(data=data_jitter[data$Treat==1,],aes(x=Treat,y=Male),colour="Blue")  + geom_point(data=data_jitter[data$Treat==0,],aes(x=Treat,y=Male),colour="Red") + theme_classic()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching}
\begin{center}
<<exact_matching_2a,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Male),colour="Blue") + geom_point(aes(x=Treat1,y=Male1),colour="Red")  + geom_point(data=unmatched[unmatched$Treat<0.5,],aes(x=Treat,y=Male),colour="Red",alpha=1) + geom_point(data=unmatched[unmatched$Treat>=0.5,],aes(x=Treat,y=Male),colour="Blue",alpha=1) + theme_classic() + geom_segment(data=matches2,aes(x=Treat,y=Male,xend=Treat1,yend=Male1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching}
\begin{center}
<<exact_matching_2b,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Male),colour="Blue") + geom_point(aes(x=Treat1,y=Male1),colour="Red")  + geom_point(data=unmatched[unmatched$Treat<0.5,],aes(x=Treat,y=Male),colour="Red",alpha=0.2) + geom_point(data=unmatched[unmatched$Treat>0.5,],aes(x=Treat,y=Male),colour="Blue",alpha=0.2) + theme_classic() + geom_segment(data=matches2,aes(x=Treat,y=Male,xend=Treat1,yend=Male1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching}
\begin{center}
<<exact_matching_3,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Male),colour="Blue") + geom_point(aes(x=Treat1,y=Male1),colour="Red") + theme_classic() + geom_segment(data=matches2,aes(x=Treat,y=Male,xend=Treat1,yend=Male1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching}
\begin{itemize}
\item Exact matching defines clear counterfactuals:
\begin{itemize}
\item What is the difference in the outcome between treated and control units \textbf{for units of the same gender}
\pause
\end{itemize}
\item After matching, we \textbf{prune/remove} unmatched units
\pause
\item \textbf{Then delete the link between the paired units, we don't need it any more}
\pause
\item Then compare the outcome of the \textbf{remaining} treated and control units
\pause
\begin{itemize}
\item Difference in means
\pause
\item Or regression of outcome on treatment
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Exact Matching}
\begin{center}
<<exact_matching_bal,echo=FALSE,warning=FALSE,message=FALSE,results='asis'>>=
summary(matched)$sum.all %>% 
  rownames_to_column() %>% 
  bind_rows(summary(matched)$sum.matched %>% rownames_to_column()) %>%
  filter(rowname=="Male") %>%
  mutate(Units=c("All","Matched")) %>%
  dplyr::select(Units,`Means Treated`,`Means Control`,`Mean Diff`) %>%
  xtable()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis0,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic() + geom_point(data=unmatched[unmatched$Treat<0.5,],aes(x=Treat,y=Outcome),colour="Red",alpha=1) + geom_point(data=unmatched[unmatched$Treat>0.5,],aes(x=Treat,y=Outcome),colour="Blue",alpha=1)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis0b,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic() + geom_point(data=unmatched[unmatched$Treat<0.5,],aes(x=Treat,y=Outcome),colour="Red",alpha=1) + geom_point(data=unmatched[unmatched$Treat>0.5,],aes(x=Treat,y=Outcome),colour="Blue",alpha=1) + geom_smooth(data=data,aes(x=Treat,y=Outcome),method="lm",se=FALSE,colour="black")
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic() + geom_point(data=unmatched[unmatched$Treat<0.5,],aes(x=Treat,y=Outcome),colour="Red",alpha=0.3) + geom_point(data=unmatched[unmatched$Treat>0.5,],aes(x=Treat,y=Outcome),colour="Blue",alpha=0.3) + geom_segment(data=matches2,aes(x=Treat,y=Outcome,xend=Treat1,yend=Outcome1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis1b,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic() + geom_point(data=unmatched[unmatched$Treat<0.5,],aes(x=Treat,y=Outcome),colour="Red",alpha=0) + geom_point(data=unmatched[unmatched$Treat>0.5,],aes(x=Treat,y=Outcome),colour="Blue",alpha=0) + geom_segment(data=matches2,aes(x=Treat,y=Outcome,xend=Treat1,yend=Outcome1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis2,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis3,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches_true <- matches %>% filter(is.na(X1)==FALSE)

data_matched <- data[c(as.numeric(matches_true$rowname),matches_true$X1),]

matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic() + geom_smooth(data=data_matched,aes(x=Treat,y=Outcome),method="lm",se=FALSE,colour="black")
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Exact Matching Analysis}
\begin{center}
<<exact_matching_analysis4,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Treat,y=Outcome),colour="Blue") + geom_point(aes(x=Treat1,y=Outcome1),colour="Red") + theme_classic() + geom_smooth(data=data_matched,aes(x=Treat,y=Outcome),method="lm",se=FALSE,colour="black")  + geom_smooth(data=data,aes(x=Treat,y=Outcome),method="lm",se=FALSE,colour="black",lty=2)
@
\end{center}
\end{frame}

<<nearest_matching,echo=FALSE, warning=FALSE, message=FALSE>>=
set.seed(05410)
N <- 150
treat <- rbinom(N,1,0.3)
num_treated <- length(treat[treat==1])
age <- NA
data <- as.data.frame(cbind(treat,age))
names(data) <- c("Treat","Age")
data <- data %>% mutate(Age=runif(N,18,70)+20*data$Treat)

matched <- matchit(Treat~Age, data=data, method="nearest") #This makes more sense

matches <- data.frame(matched$match.matrix) %>% rownames_to_column()

#data_jitter <- data %>% mutate(Treat=Treat+runif(dim(data)[1],-0.1,0.1), Male=Male+runif(dim(data)[1],-0.1,0.1))

matches_T <- data[matches$rowname,] %>% rownames_to_column()

matches_C <- data[as.numeric(as.character(matches$X1)),] %>% rownames_to_column() 

matches2 <- matches_T %>% bind_cols(matches_C) %>% filter(is.na(Age1)==FALSE)

unmatched_rows <- which(!(1:dim(data)[1] %in% as.numeric(c(matches2$rowname,matches2$rowname1))))

unmatched <- data %>% slice(unmatched_rows)
@

\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{center}
<<nearest_matching_1,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{center}
<<nearest_matching_2_pre,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic() + geom_segment(data=matches2[8,],aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2)
@
\end{center}
\end{frame}


\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{center}
<<nearest_matching_2,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{center}
<<nearest_matching_3,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age),colour="Blue") + geom_point(aes(x=factor(Treat1),y=Age1),colour="Red") + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2) + geom_point(data=unmatched,aes(x=factor(Treat),y=Age,colour=factor(Treat)),alpha=0.2) 
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{center}
<<nearest_matching_4,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age),colour="Blue") + geom_point(aes(x=factor(Treat1),y=Age1),colour="Red") + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2) + geom_point(data=unmatched,aes(x=factor(Treat),y=Age,colour=factor(Treat)),alpha=0) 
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{center}
<<nearest_matching_bal,echo=FALSE,warning=FALSE,message=FALSE,results='asis'>>=
summary(matched)$sum.all %>% 
  rownames_to_column() %>% 
  bind_rows(summary(matched)$sum.matched %>% rownames_to_column()) %>%
  filter(rowname=="Age") %>%
  mutate(Units=c("All","Matched")) %>%
  dplyr::select(Units,`Means Treated`,`Means Control`,`Mean Diff`) %>%
  xtable()
@
\end{center}
\end{frame}




\begin{frame}
\frametitle{Nearest Neighbour Matching}
\begin{itemize}
\item Two potential problems with nearest neighbour matching:
\pause
\begin{enumerate}
\item \textbf{Nearest does not mean close:} The oldest treated units are matched with, but very different to, the oldest control units
\pause
\begin{itemize}
\item We need some \textbf{absolute} limits on the distance we can match units within
\pause
\item We can add 'calipers' to matching to match only within a fixed range
\pause
\end{itemize}
\item \textbf{The order of matching matters:} The first matches use up units that might make better matches for later treated units
\pause
\begin{itemize}
\item To maximize balance we need to 'look ahead' and match in the right order
\pause
\item For this we can use optimal or genetic matching, which is fully automated
\end{itemize}
\end{enumerate}
\end{itemize}
\end{frame}

<<nearest_matching_caliper,echo=FALSE, warning=FALSE, message=FALSE>>=
set.seed(05410)
N <- 150
treat <- rbinom(N,1,0.3)
num_treated <- length(treat[treat==1])
age <- NA
data <- as.data.frame(cbind(treat,age))
names(data) <- c("Treat","Age")
data <- data %>% mutate(Age=runif(N,18,70)+20*data$Treat)

matched <- matchit(Treat~Age, data=data, method="nearest",caliper=0.1)

matches <- data.frame(matched$match.matrix) %>% rownames_to_column()

#data_jitter <- data %>% mutate(Treat=Treat+runif(dim(data)[1],-0.1,0.1), Male=Male+runif(dim(data)[1],-0.1,0.1))

matches_T <- data[matches$rowname,] %>% rownames_to_column()

matches_C <- data[as.numeric(as.character(matches$X1)),] %>% rownames_to_column() 

matches2 <- matches_T %>% bind_cols(matches_C) %>% filter(is.na(Age1)==FALSE)

unmatched_rows <- which(!(1:dim(data)[1] %in% as.numeric(c(matches2$rowname,matches2$rowname1))))

unmatched <- data %>% slice(unmatched_rows)
@

\begin{frame}
\frametitle{Nearest Neighbour Matching with Caliper}
\begin{center}
<<nearest_matching_1_caliper,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching with Caliper}
\begin{center}
<<nearest_matching_2_pre_caliper,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic() + geom_segment(data=matches2[8,],aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching with Caliper}
\begin{center}
<<nearest_matching_2_caliper,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching with Caliper}
\begin{center}
<<nearest_matching_3_caliper,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age),colour="Blue") + geom_point(aes(x=factor(Treat1),y=Age1),colour="Red") + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2) + geom_point(data=unmatched,aes(x=factor(Treat),y=Age,colour=factor(Treat)),alpha=0.2) 
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching with Caliper}
\begin{center}
<<nearest_matching_4_caliper,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age),colour="Blue") + geom_point(aes(x=factor(Treat1),y=Age1),colour="Red") + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2) + geom_point(data=unmatched,aes(x=factor(Treat),y=Age,colour=factor(Treat)),alpha=0) 
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Nearest Neighbour Matching with Caliper}
\begin{center}
<<nearest_matching_bal_caliper,echo=FALSE,warning=FALSE,message=FALSE,results='asis'>>=
summary(matched)$sum.all %>% 
  rownames_to_column() %>% 
  bind_rows(summary(matched)$sum.matched %>% rownames_to_column()) %>%
  filter(rowname=="Age") %>%
  mutate(Units=c("All","Matched")) %>%
  dplyr::select(Units,`Means Treated`,`Means Control`,`Mean Diff`) %>%
  xtable()
@
\end{center}
\begin{itemize}
\item Note: p-values don't mean so much for balance tests
\pause
\item We always want to improve balance as much as possible
\pause
\item Better to compare (standardized) difference in means
\end{itemize}
\end{frame}

<<optimal_matching,echo=FALSE, warning=FALSE, message=FALSE>>=
library(optmatch)
set.seed(05410)
N <- 300
treat <- rbinom(N,1,0.3)
num_treated <- length(treat[treat==1])
age <- NA
data <- as.data.frame(cbind(treat,male))
names(data) <- c("Treat","Age")
data <- data %>% mutate(Age=runif(N,18,70)+20*data$Treat)

matched <- matchit(Treat~Age, data=data, method="optimal") #This makes more sense

matches <- data.frame(matched$match.matrix) %>% rownames_to_column()

#data_jitter <- data %>% mutate(Treat=Treat+runif(dim(data)[1],-0.1,0.1), Male=Male+runif(dim(data)[1],-0.1,0.1))

matches_T <- data[matches$rowname,] %>% rownames_to_column()

matches_C <- data[as.numeric(as.character(matches$X1)),] %>% rownames_to_column() 

matches2 <- matches_T %>% bind_cols(matches_C) %>% filter(is.na(Age1)==FALSE)

unmatched_rows <- which(!(1:dim(data)[1] %in% as.numeric(c(matches2$rowname,matches2$rowname1))))

unmatched <- data %>% slice(unmatched_rows)
@

\begin{frame}
\frametitle{Optimal Matching}
\begin{center}
<<optimal_matching_1,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Optimal Matching}
\begin{center}
<<optimal_matching_2,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Optimal Matching}
\begin{center}
<<optimal_matching_3,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age),colour="blue") + geom_point(aes(x=factor(Treat1),y=Age1),colour="red") + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2) + geom_point(data=unmatched,aes(x=factor(Treat),y=Age,colour=factor(Treat)),alpha=0.2) 
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Optimal Matching}
\begin{center}
<<optimal_matching_4,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age),colour="blue") + geom_point(aes(x=factor(Treat1),y=Age1),colour="red") + theme_classic() + geom_segment(data=matches2,aes(x=factor(Treat),y=Age,xend=factor(Treat1),yend=Age1),lty=2) + geom_point(data=unmatched,aes(x=factor(Treat),y=Age,colour=factor(Treat)),alpha=0) 
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Optimal Matching}
\begin{center}
<<optimal_matching_bal,echo=FALSE,warning=FALSE,message=FALSE,results='asis'>>=
summary(matched)$sum.all %>% 
  rownames_to_column() %>% 
  bind_rows(summary(matched)$sum.matched %>% rownames_to_column()) %>%
  filter(rowname=="Age") %>%
  mutate(Units=c("All","Matched")) %>%
  dplyr::select(Units,`Means Treated`,`Means Control`,`Mean Diff`) %>%
  xtable()
@
\end{center}
\end{frame}

<<propscore_matching,echo=FALSE, warning=FALSE, message=FALSE>>=
library(Zelig)
library(ZeligChoice)
set.seed(05410)
N <- 150
treat <- rbinom(N,1,0.3)
num_treated <- length(treat[treat==1])
age <- NA
data <- as.data.frame(cbind(treat,age))
names(data) <- c("Treat","Age")
data <- data %>% mutate(Age=runif(N,18,70)+20*data$Treat)

#Calc propscore
data$pscores <- glm(Treat~Age, data=data, family="binomial")$fitted.values

matched <- matchit(Treat~pscores, data=data, method="nearest")

matches <- data.frame(matched$match.matrix) %>% rownames_to_column()

matches_T <- data[matches$rowname,] %>% rownames_to_column()

matches_C <- data[as.numeric(as.character(matches$X1)),] %>% rownames_to_column() 

matches2 <- matches_T %>% bind_cols(matches_C) %>% filter(is.na(Age1)==FALSE)

unmatched_rows <- which(!(1:dim(data)[1] %in% as.numeric(c(matches2$rowname,matches2$rowname1))))

unmatched <- data %>% slice(unmatched_rows)
@

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{itemize}
\item With many covariates we have a 'dimensionality' challenge
\pause
\begin{itemize}
\item Overlap is almost zero
\pause
\item Counterfactuals are impossible to define
\end{itemize}
\item The propensity score simplifies matching to a single dimension
\pause
\begin{itemize}
\item Confounders only matter to the extent they affect the probability of treatment
\pause
\item So let's use the confounders to \textbf{predict treatment}
\pause
\item That's different to actual treatment status, with the remainder due to 'random' factors (if we include all confounders)
\pause
\end{itemize}
\item Then use the propensity score (probability 0-1) to match treated and control units which have the same ex ante probability of treatment
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{itemize}
\item But some concerns about drawbacks of propensity score matching
\pause
\item May have poor balance on individual confounders
\pause
\item Balance may get worse as we remove more units
\pause
\item We have to get the functional form of the treatment explanation right (linear, quadratic etc.) so we remain vulnerable to model dependence!
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{itemize}
\item Treatment: 1/0
\item Confounder: Age
\item Logit model predicting treatment:
\end{itemize}
$$Treat_i = \alpha + \beta Age_i +\epsilon_i$$
\pause
$$Predicted\_Treat_i = -7.19 + 0.116 Age_i +\epsilon_i$$
\pause
\begin{itemize}
\item Match on the values of $Predicted\_Treat_i$ (fitted values of the regression)
\pause
\item I.e. match units with a similar \textit{probability} of treatment
\pause
\item ...Regardless of whether they actually get treated
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{center}
<<pscore_matching_1,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=factor(Treat),y=Age,colour=factor(Treat))) + theme_classic()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{center}
<<pscore_matching_2,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=Age,y=pscores)) + theme_classic() + xlab("Probability of Treatment | Age")
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{center}
<<pscore_matching_3,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=Age,y=pscores,colour=factor(Treat))) + theme_classic() + xlab("Probability of Treatment | Age")
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{center}
<<pscore_matching_4,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=Age,y=pscores,colour=factor(Treat))) + theme_classic() + xlab("Probability of Treatment | Age") + geom_curve(data=matches2,aes(x=Age,y=pscores,xend=Age1,yend=pscores1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching}
\begin{center}
<<pscore_matching_bal,echo=FALSE,warning=FALSE,message=FALSE,results='asis'>>=
summary(matched)$sum.all %>% 
  rownames_to_column() %>% 
  bind_rows(summary(matched)$sum.matched %>% rownames_to_column()) %>%
  filter(rowname=="pscores") %>%
  mutate(Units=c("All","Matched")) %>%
  dplyr::select(Units,`Means Treated`,`Means Control`,`Mean Diff`) %>%
  xtable()
@
\end{center}
\end{frame}

<<propscore_matching_caliper,echo=FALSE, warning=FALSE, message=FALSE>>=
library(Zelig)
library(ZeligChoice)
set.seed(05410)
N <- 150
treat <- rbinom(N,1,0.3)
num_treated <- length(treat[treat==1])
age <- NA
data <- as.data.frame(cbind(treat,age))
names(data) <- c("Treat","Age")
data <- data %>% mutate(Age=runif(N,18,70)+20*data$Treat)

#Calc propscore
data$pscores <- glm(Treat~Age, data=data, family="binomial")$fitted.values

matched <- matchit(Treat~pscores, data=data, method="nearest",caliper=0.2)

matches <- data.frame(matched$match.matrix) %>% rownames_to_column()

matches_T <- data[matches$rowname,] %>% rownames_to_column()

matches_C <- data[as.numeric(as.character(matches$X1)),] %>% rownames_to_column() 

matches2 <- matches_T %>% bind_cols(matches_C) %>% filter(is.na(Age1)==FALSE)

unmatched_rows <- which(!(1:dim(data)[1] %in% as.numeric(c(matches2$rowname,matches2$rowname1))))

unmatched <- data %>% slice(unmatched_rows)
@

\begin{frame}
\frametitle{Propensity Score Matching with Caliper}
\begin{center}
<<pscore_matching_caliper_1,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
data %>% ggplot() + geom_point(aes(x=Age,y=pscores,colour=factor(Treat))) + theme_classic() + xlab("Probability of Treatment | Age") + geom_curve(data=matches2,aes(x=Age,y=pscores,xend=Age1,yend=pscores1),lty=2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching with Caliper}
\begin{center}
<<pscore_matching_caliper_2,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Age,y=pscores),colour="red") + geom_point(aes(x=Age1,y=pscores1),colour="blue") + theme_classic() + xlab("Probability of Treatment | Age") + geom_curve(data=matches2,aes(x=Age,y=pscores,xend=Age1,yend=pscores1),lty=2) + geom_point(data=unmatched,aes(x=Age,y=pscores,colour=factor(Treat)),alpha=0.2)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching with Caliper}
\begin{center}
<<pscore_matching_caliper_3,echo=FALSE,warning=FALSE,message=FALSE,fig.keep='high',fig.height=3.3, fig.width=3.3>>=
matches2 %>% ggplot() + geom_point(aes(x=Age,y=pscores),colour="red") + geom_point(aes(x=Age1,y=pscores1),colour="blue") + theme_classic() + xlab("Probability of Treatment | Age") + geom_curve(data=matches2,aes(x=Age,y=pscores,xend=Age1,yend=pscores1),lty=2) + geom_point(data=unmatched,aes(x=Age,y=pscores,colour=factor(Treat)),alpha=0)
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Propensity Score Matching with Caliper}
\begin{center}
<<pscore_matching_bal_caliper,echo=FALSE,warning=FALSE,message=FALSE,results='asis'>>=
summary(matched)$sum.all %>% 
  rownames_to_column() %>% 
  bind_rows(summary(matched)$sum.matched %>% rownames_to_column()) %>%
  filter(rowname=="pscores") %>%
  mutate(Units=c("All","Matched")) %>%
  dplyr::select(Units,`Means Treated`,`Means Control`,`Mean Diff`) %>%
  xtable()
@
\end{center}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Matching was supposed to be 'non-parametric' to reduce researcher influence, but there are a lot of options here!
\pause
\item That's okay! Regression can be biased if we try to make a p-value significant, but with matching we always want more balance
\pause
\begin{itemize}
\item As long as we do matching \textbf{without} looking at the outcome variables
\end{itemize}
\pause
\item How much trimming/pruning should we undertake?
\pause
\item We can always enforce \textbf{stricter} matching (eg. narrower calipers, more exact matching) to get better balance
\pause
\begin{itemize}
\item But our N will approach zero, so little statistical power
\pause
\item A Bias-variance trade-off
\pause
\item Try alternatives
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Matching}
\includegraphics[width=0.65\textwidth]{Balance-N_trade-off.png}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Matching preferred to regression where:
\pause
\begin{itemize}
\item Never! Do both!
\end{itemize}
\item Matching makes a big contribution where there's poor overlap
\pause
\item Matching + Regression = "Doubly Robust"
\pause
\begin{itemize}
\item If \textbf{either} matching produces balance \textbf{OR} we have the correct functional form for regression, we can make causal inference
\end{itemize}
\end{itemize}
\end{frame}

\section{Matching vs. Experiments}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Arceneaux, Gerber and Green (2005)
\pause
\item How does matching work on experimental (IV) data? (eg. for how to get voters to vote)
\pause
\item Matching is biased compared to the experimental results
\pause
\item Lots of controls 
\pause
\item But unobserved confounders mean matching can't recover causal estimates
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{Matching}
\begin{itemize}
\item Bias was due to whether people actually answered phone calls
\pause
\item Huge N, \textbf{Perfect balance} \pause (on what they could measure)
\pause
\item Experimental measure: 0.4
\pause
\item OLS estimate: 2.7
\pause
\item Matching estimate: 2.8
\pause
\item We can't control for likelihood of answering the phone using the (many) covariates they have
\pause
\item Matching still relies on \textbf{measuring all confounders}
\end{itemize}
\end{frame}


\end{document}
